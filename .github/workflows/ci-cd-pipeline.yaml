name: CI/CD Pipeline

on:
 push:
    branches: [main]

jobs:
 build-and-deploy:
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    # install dependencies and test done as single step for each the four services
    - name: install dependencies and test books-services
      run: |
        npm install
        npm test
      working-directory: ./services/books-service

    - name: install dependencies and test for orders-service
      run: |
        npm install
        npm test
      working-directory: ./services/orders-service

    - name: install dependencies and test  for users-service
      run: |
        npm install
        npm test
      working-directory: ./services/users-service

    - name: install dependencies and test  for frontend
      run: |
        npm install
        npm test
      working-directory: ./frontend

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    # Build tag and push books-service
    - name: Build, tag, and push the books-service Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: books-service
        IMAGE_TAG: ${{ github.sha  }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    # Build tag and push orders-service
    - name: Build tag and push the orders-service Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry}}
        ECR_REPOSITORY: orders-service
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    # Build tag and push users-service
    - name: Build tag and push the users-service Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: users-service
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    #Build tag and push frontend
    - name: Build tag and push frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - name: update kubeconfig
      run: aws eks update-kubeconfig --region us-east-1 --name online-store-cluster

    - name: Deploy to EKS
      run: |
        kubectl apply -f manifests/
       
